# Multi-Modal Physiological Sensing Platform - Pre-commit Configuration
# This configuration ensures code quality and consistency across the project
# Run `pre-commit install` to enable these hooks

repos:
  # Basic file formatting and checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of file
      - id: check-yaml
        name: Check YAML syntax
        args: [--allow-multiple-documents]
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-xml
        name: Check XML syntax
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-case-conflict
        name: Check for filename conflicts
      - id: check-added-large-files
        name: Check for large files
        args: [--maxkb=10000]  # 10MB limit
      - id: check-symlinks
        name: Check for broken symlinks

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        name: Format Python code with Black
        files: ^pc_controller/src/.*\.py$
        args: [--line-length=100]
        types: [python]

  # Python import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort Python imports
        files: ^pc_controller/src/.*\.py$
        args: [--profile=black, --line-length=100]
        types: [python]

  # Python linting with Ruff (replaces flake8, pyflakes, etc.)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.10
    hooks:
      - id: ruff
        name: Python linting with Ruff
        files: ^pc_controller/src/.*\.py$
        args: [--fix, --exit-non-zero-on-fix]
        types: [python]

  # Python type checking with MyPy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.17.1
    hooks:
      - id: mypy
        name: Python type checking
        files: ^pc_controller/src/.*\.py$
        args: [--ignore-missing-imports, --check-untyped-defs]
        additional_dependencies: [
          "PyQt6>=6.6.0",
          "pyqtgraph>=0.13.3",
          "numpy>=1.24",
          "pandas>=2.2",
          "types-setuptools"
        ]
        types: [python]

  # Security scanning with Bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        name: Security scanning with Bandit
        files: ^pc_controller/src/.*\.py$
        args: [-f, json, -o, .bandit-report.json, --exit-zero]
        types: [python]

  # Kotlin/Android linting (runs ktlintCheck via Gradle)
  - repo: local
    hooks:
      - id: ktlint-check
        name: Kotlin linting with ktlint
        entry: ./gradlew
        args: [":android_sensor_node:app:ktlintCheck", "--console=plain"]
        language: system
        files: ^android_sensor_node/.*\.(kt|kts)$
        pass_filenames: false

  # Documentation linting for Markdown
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.42.0
    hooks:
      - id: markdownlint
        name: Markdown linting
        args: [--config=.markdownlint.yaml]
        files: ^docs/.*\.md$

  # Custom Python test runner (only runs affected tests)
  - repo: local
    hooks:
      - id: python-tests
        name: Run Python unit tests
        entry: python
        args: [-m, pytest, pc_controller/tests/, -x, --tb=short, --timeout=30, -q]
        language: system
        files: ^pc_controller/.*\.py$
        pass_filenames: false
        types: [python]

  # Configuration validation
  - repo: local
    hooks:
      - id: validate-configs
        name: Validate project configuration files
        entry: python
        args: [scripts/validate_configs.py]
        language: system
        files: ^(pyproject\.toml|pytest\.ini|\.pre-commit-config\.yaml|.*requirements.*\.txt)$
        pass_filenames: false

# CI configuration for running pre-commit in GitHub Actions
ci:
  autofix_commit_msg: "style: auto-fix pre-commit issues"
  autofix_prs: true
  autoupdate_branch: "develop"
  autoupdate_commit_msg: "chore: update pre-commit hooks"
  autoupdate_schedule: "weekly"
  skip: [ktlint-check, python-tests]  # Skip slow hooks in CI

# Pre-commit hook configuration
default_stages: [pre-commit, pre-push]
fail_fast: false
minimum_pre_commit_version: "3.0.0"
